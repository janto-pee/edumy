openapi: 3.0.1
info:
  title: Coursera Business API
  version: v1
  description: A set of APIs for business integrations that allow Coursera customers to access their data via HTTP requests.
servers:
  - url: https://api.coursera.com/ent
    description: The main domain for sending HTTP requests to Coursera via the Coursera API Platform is api.coursera.com and the sub path is /ent.

paths:
  /api/businesses.v1/{orgId}:
    get:
      operationId: getBusinessOrganization
      summary: Get organization information by orgId.
      security:
        - BearerToken: []
      parameters:
        - name: orgId
          description: The ID of the organization to retrieve data for.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessOrganizations'
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'

  /api/businesses.v1/{orgId}/users:
    get:
      operationId: getBusinessOrganizationUsers
      summary: Get all users for an organization.
      description: Returns a paginated list of users within your organization.
      security:
        - BearerToken: []
      parameters:
        - name: orgId
          description: The ID of the organization to retrieve data for.
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of users to return.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          example: 10
        - name: start
          in: query
          description: The starting index of the users to return.
          required: false
          schema:
            type: string
            default: "0"
          example: "0"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessOrganizationUsers'
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'

    post:
      operationId: updateOrDeleteBusinessOrganizationUserByEmail
      summary: Update or delete organization user by email.
      description: Updates or deletes a user in the organization by email.
      security:
        - BearerToken: []
      parameters:
        - name: orgId
          description: The ID of the organization to retrieve data for.
          in: path
          required: true
          schema:
            type: string
        - name: action
          in: query
          required: true
          description: The action you pass to this API, which should either be updateByEmail or deleteByEmail.
          schema:
            type: string
            enum:
              - updateByEmail
              - deleteByEmail
        - name: email
          description: The user email address.
          in: query
          required: true
          schema:
            type: string
        - name: invitationsOnly
          description: Boolean parameter to tell the Api whether to delete just invitations, or additionally program memberships. Used with action = deleteByEmail.
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: softDelete
          description: Boolean parameter to tell businessApi whether to use soft-deletion for program memberships. Only applicable when invitationsOnly = false. Used with action = deleteByEmail.
          in: query
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        description: request body containing enterprise user data update fields. Required when using action = updateByEmail.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseUserDataUpdateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseUserResourceModel'
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'      

  /api/businesses.v1/{orgId}/programs:
    get:
      operationId: getBusinessPrograms
      summary: Get programs for an organization.
      description: Returns a paginated list of active learning programs created within your account.
      security:
        - BearerToken: []
      parameters:
        - name: orgId
          description: The ID of the organization to retrieve programs for.
          in: path
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - name: ids
          description: Include a comma-separated list of program ids to fetch specific records.
          in: query
          required: false
          schema:
            type: string
          example: k6a7z5K_Ee2fXxKzGPkj0q,y0TO1t4fEe2bIBLACu-NKq
        - name: excludeContent
          description: A flag to include or exclude program content with response.
          in: query
          required: true
          schema:
            type: boolean
            default: false
          example: false
        - name: limit
          in: query
          description: The maximum number of programs to be returned.
          schema:
            type: integer
            format: int32
            default: 100
          example: 50
        - name: start
          in: query
          description: The starting index of the programs to be returned.
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessPrograms'
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'

  /api/businesses.v1/{orgId}/programs/{programId}/users:
    post:
      summary: Update user data in organization program.
      description: Update a user data in organization's program by email or externalId.
      operationId: updateUserByExternalIdOrEmailInOrgProgram
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          description: The unique identifier for your organization.
          required: true
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          schema:
            type: string
          description: The identifier of a program for the organization.
          required: true
          example: k6a7z5K_Ee2fXxKzGPkj0q
        - name: action
          in: query
          required: true
          description: The action you pass to this API, it should be updateUserByEmail or updateUserByExternalId.
          schema:
            type: string
            enum:
              - updateUserByEmail
              - updateUserByExternalId
        - name: email
          in: query
          schema:
            type: string          
          description: The email address that identifies the user. It's required when action is updateUserByEmail.
          required: false
          example: user@coursera.org
        - name: updateUserByExternalId
          in: query
          schema:
            type: string          
          description: The external id that identifies the user. It's required when action is updateUserByExternalId.
          required: false
          example: user_external_id
      requestBody:
        description: request body containing enterprise user data update fields. Required when using action = updateByEmail.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseProgramUserUpdateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseProgramUserUpdateResponse'
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'    

  /api/businesses.v1/{orgId}/contents:
    get:
      summary: Retrieve contents for your organization
      description: Returns a paginated list of courses and specializations that are available through your learning programs. If a program has a specialization, we also include the courses within it
      operationId: getContents
      security:
        - BearerToken: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for your organization.
          example: DjYCkBQTQV69TtWA7RuNug
        - name: start
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          description: Index of the first result to be returned.
          example: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
          description: The maximum number of contents to be returned.
          example: 50
        - name: q
          in: query
          required: false
          schema:
            type: string
            enum:
              - byProgramIds
          description: Filter to only return results for a program or programs. Default is all programs.
          example: "&q=byProgramIds&programIds=k6a7z5K_Ee2fXxKzGPkj0q,y0TO1t4fEe2bIBLACu-NKq"
        - name: programIds
          in: query
          required: false
          schema:
            type: string
          description: Required if q=byProgramIds is present. A list of unique ids for programs in your organization. If this parameter is provided the content will be filtered only from these programs.
          example: "&q=byProgramIds&programIds=k6a7z5K_Ee2fXxKzGPkj0q,y0TO1t4fEe2bIBLACu-NKq"
      responses:
        "200":
          description: Successful response containing a list of contents and pagination data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentList"
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant_01:
                  $ref: '#/components/examples/400_BadRequest_Variant_02_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
  /api/businesses.v1/{orgId}/contents/{id}:
    get:
      summary: Retrieve a content's detail by an id
      description: Returns a list that contains one object.
      operationId: getContentById
      security:
        - BearerToken: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier for your organization.
          example: DjYCkBQTQV69TtWA7RuNug
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: A id in the ContentType~Id format.
          example: Course~rUHfSakHEeeQ3gpuC4Fs_g-HixlS
      responses:
        "200":
          description: Successful response containing a content object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentList"
              example:
                elements:
                  - subtitleLanguageCodes:
                      - ko
                    difficultyLevel: INTERMEDIATE
                    contentId: aRxESQNMEeuH3Q6N8dCjzw
                    description: This specialization is intended for aspiring learners and professionals seeking to hone their skills in the quantitative finance area. Through a series of 5 courses, we will cover derivative pricing, asset allocation, portfolio optimization as well as other applications of financial engineering such as real options, commodity and energy derivatives and algorithmic trading. Those financial engineering topics will prepare you well for resolving related problems, both in the academic and industrial worlds.
                    languageCode: en
                    instructors:
                      - photoUrl: https://coursera-instructor-photos.s3.amazonaws.com/adfbasdf.jpeg
                        name: Joe Doe 1
                        title: Tang Family Professor
                        department: Industrial Engineering and Operations Research Department
                      - photoUrl: https://coursera-instructor-photos.s3.amazonaws.com/afdasdf.jpg
                        name:  Joe Doe 2
                        title: Professor of Professional Practice
                        department: Department of Industrial Engineering and Operations Research

                    partners:
                      - name: Columbia University
                        logoUrl: https://d3njjcbhbojbot.cloudfront.net/api/utilities/v1/imageproxy/https://coursera-university-assets.s3.amazonaws.com/9b/42f2eca2f10769400d1f8519892413/ColumbiaLOGO.png
                    name: Financial Engineering and Risk Management
                    programs:
                      - contentUrl: https://www.coursera.org/programs/learning-program-uzmjj?productId=aRxESQNMEeuH3Q6N8dCjzw&productType=s12n&showMiniModal=true&isExternal=true
                        programId: k6a7z5K_Ee2fXxKzGPkj0Q
                      - contentUrl: https://www.coursera.org/programs/test-program-1-lvseg?productId=aRxESQNMEeuH3Q6N8dCjzw&productType=s12n&showMiniModal=true&isExternal=true
                        programId: y0TO1t4fEe2bIBLACu-NKQ
                    id: Specialization~aRxESQNMEeuH3Q6N8dCjzw
                    extraMetadata:
                      typeName: specializationMetadata
                      definition:
                        courseIds:
                          - contentId: MzfG3f9QEei65w7Gl4XZlA
                            contentType: Course
                          - contentId: NyzO9f9QEeiU2RImQolf6g
                            contentType: Course
                        promoPhoto: https://d15cw65ipctsrr.cloudfront.net/b9/0c619aede341858f59410b70c1178a/shutterstock_1923576143-1-.jpg
                        tagline: Advance Your Knowledge in Financial Engineering
                      contentType: Specialization
                      slug: financialengineering
                paging: {}
                linked: {}
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant_01:
                  $ref: '#/components/examples/404_NotFound_Variant_01_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_02_CONTENT_ID_NOT_IN_ORG'
  /api/businesses.v1/{orgId}/programs/{programId}/courseMaterials/{courseId}:
    get:
      summary: Get course materials
      description: Returns a paginated list of individual course materials for a given course.
      operationId: getCourseMaterials
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          description: The unique identifier for your organization.
          required: true
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          schema:
            type: string
          description: The identifier of a program for the organization.
          required: true
          example: k6a7z5K_Ee2fXxKzGPkj0q
        - in: path
          name: courseId
          schema:
            type: string
          description: The identifier of a course in the program.
          required: true
          example: daG-a-O1EeijKBISCWxf6g
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  elements:
                    type: array
                    items:
                      $ref: '#/components/schemas/CourseMaterials'
                  paging:
                    type: object
                  linked:
                    type: object
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant_01:
                  $ref: '#/components/examples/404_NotFound_Variant_01_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_02_COURSE_NOT_IN_PROGRAM'
  /api/businesses.v1/{orgId}/programs/{programId}/programEnrollments/{external_id~content_type~content_id}:
    get:
      summary: Get user enrollment state in a course or a specialization
      description: For a specific user, return whether they are currently enrolled in a specific course
      operationId: getProgramEnrollments
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          required: true
          description: The unique identifier for your organization.
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          required: true
          description: The identifier of the program for the organization.
          schema:
            type: string
          example: k6a7z5K_Ee2fXxKzGPkj0q
        - in: path
          name: external_id~content_type~content_id
          required: true
          description: Composed identifier with external ID, content type and content ID separated by tildes (~)
          schema:
            type: string
          example: SU3408075~Course~uR9ep230EeqX8gpNBtLRnw
      responses:
        "200":
          description: User enrollment state in the course or specialization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentState'
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant_01:
                  $ref: '#/components/examples/404_NotFound_Variant_01_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_02_USER_NOT_FOUND_IN_PROGRAM'
  /api/businesses.v1/{orgId}/programs/{programId}/programEnrollments:
    post:
      summary: Enroll a selected user into a specific course
      description: Enrolls a selected user into a specific course. Note that this will only work if the user already has a Coursera account and a current program membership.
      operationId: enrollUserInCourse
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: 4LVhtQQNEemZUwrw3z8SgA
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalId:
                  description: The unique external identifier for a user.
                  type: string
                  example: johndoe-sample-domain-ID
                contentType:
                  description: Course or Specialization.
                  type: string
                  example: Course
                contentId:
                  description: The content UUID.
                  type: string
                  example: 6EAVDavbEeaPvQ5eOPtN_A
                action:
                  description: ENROLL or UNENROLL.
                  type: string
                  example: ENROLL
        required: true
      responses:
        "201":
          description: User enrollment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMembershipResponse'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant_01:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_PROGRAM_ENROLLMENTS_INVALID_JSON'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_02_USER_NOT_FOUND_IN_PROGRAM'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
  /api/businesses.v1/{orgId}/programs/{programId}/curriculumCollections:
    get:
      summary: Get list of curriculum collections in a program
      description: Returns a paginated list of curriculum collections in your program.
      operationId: getCurriculumCollections
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The unique identifier for your organization
          schema:
            type: string
          required: true
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The identifier of a program for the organization.
          schema:
            type: string
          required: true
          example: k6a7z5K_Ee2fXxKzGPkj0q
        - in: query
          name: start
          description: Index of the first result to be returned.
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - in: query
          name: limit
          description: Maximum number of results to be returned.
          schema:
            type: integer
            format: int32
            default: 100
          example: 50
      responses:
        "200":
          description: Successful response containing a list of curriculum collections and pagination data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurriculumCollection"
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
  /api/businesses.v1/{orgId}/enrollmentReports:
    get:
      summary: Get member progress across an organization
      description: Returns a paginated list of course progress summaries for all users that are managed in your account. Each entry in the list represents a single user’s progress for a single course. The overall progress is a number between 0 to 100, highlighting percentage of items completed by the learner. It is possible for a learner to have COMPLETED a course but have overall progress < 100, as a learner needs only to pass all graded items in order to complete a course.
      operationId: getEnrollmentReports
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
          description: The unique identifier for your organization.
          example: DjYCkBQTQV69TtWA7RuNug
        - name: start
          in: query
          description: Index of the first result to be returned.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - name: limit
          in: query
          description: Maximum number of results to be returned.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
          example: 50
        - name: includeS12n
          in: query
          description: Include S12n (Specialization) enrollments.
          required: false
          schema:
            type: boolean
            default: false
          example: true
        - name: q
          in: query
          description: Query parameter can be one of "byProgramId" or "byUserProgramId". "byProgramId" will return enrollments for a specified programId and "byUserProgramId" will return enrollments for a given user externalId in a given program programId.
          required: false
          schema:
            type: string
            enum: [byProgramId, byUserProgramId]
          examples:
            byProgramId:
              value: "&q=byProgramId&programId=k6a7z5K_Ee2fXxKzGPkj0q"
            byUserProgramId:
              value: "&q=byUserProgramId&programId=k6a7z5K_Ee2fXxKzGPkj0q&externalId=SU3408075"
        - name: programId
          in: query
          description: Query will return enrollments for specified programId in this organization. This is required when "q" is set to either "byProgramId" or "byUserProgramId".
          schema:
            type: string
          example: k6a7z5K_Ee2fXxKzGPkj0q
        - name: externalId
          in: query
          description: Unique identifier of the user. Required when "q" is set to "byUserProgramId".
          schema:
            type: string
          example: SU3408075
        - name: includeDeletedMembers
          in: query
          description: If set to true, will include deleted members.
          required: false
          schema:
            type: boolean
          example: false
        - name: enrollAtBefore
          in: query
          description: Range query filter based on timestamp in milliseconds. All enrollments with enrollAt timestamp greater than input timestamp will be filtered out.
          required: false
          schema:
            type: integer
            format: int64
          example: 1687289825474
        - name: enrollAtAfter
          in: query
          description: Range query filter based on timestamp in milliseconds. All enrollments with enrollAt timestamp lower than input timestamp will be filtered out.
          required: false
          schema:
            type: integer
            format: int64
          example: 1687289825474
        - name: lastActivityBefore
          in: query
          description: Range query filter based on timestamp in milliseconds. All enrollments with lastActivity timestamp greater than input timestamp will be filtered out.
          required: false
          schema:
            type: integer
            format: int64
          example: 1687289825474
        - name: lastActivityAfter
          in: query
          description: Range query filter based on timestamp in milliseconds. All enrollments with lastActivity timestamp lower than input timestamp will be filtered out.
          required: false
          schema:
            type: integer
            format: int64
          example: 1687289825474
        - name: completedAtBefore
          in: query
          description: Range query filter based on timestamp in milliseconds. All enrollments with completedAt timestamp greater than input timestamp will be filtered out.
          required: false
          schema:
            type: integer
            format: int64
          example: 1687289825474
        - name: completedAtAfter
          in: query
          description: Range query filter based on timestamp in milliseconds. All enrollments with completedAt timestamp lower than input timestamp will be filtered out.
          required: false
          schema:
            type: integer
            format: int64
          example: 1687289825474
        - name: useCursorPagination
          in: query
          description: Use cursor-based pagination instead of the default index-based pagination.
          required: false
          schema:
            type: boolean
          example: false
        - name: includeExpiredContracts
          in: query
          description: A flag to indicate if the result should include historical data from expired contracts.
          required: false
          schema: 
            type: boolean
          example: false
      responses:
        '200':
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentReportResponse'
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
  /api/businesses.v1/{orgId}/courseGradebookReports:
    get:
      summary: Get member progress for individual course items
      description: Retrieve course item-specific grading information with search criteria
      operationId: getCourseGradebookReports
      security:
        - BearerToken: []
      parameters:
        - name: orgId
          in: path
          required: true
          description: The unique identifier for your organization.
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - name: q
          in: query
          required: true
          description: Query parameter that only supports "search" for now.
          schema:
            type: string
            enum:
              - search
          example: "&search"
        - name: programId
          in: query
          required: false
          description: An optional program id value for search action.
          schema:
            type: string
          example: k6a7z5K_Ee2fXxKzGPkj0q
        - name: courseId
          in: query
          required: false
          description: An optional course id value to filter search results only for one course.
          schema:
            type: string
          example: B8Syn4zlEeeFiQ7tViah-g
        - name: emailOrExternalId
          in: query
          required: false
          description: An optional user's email or external id value to filter search results only for one user.
          schema:
            type: string
          example: user1@coursera.org
        - name: includeDeletedMembers
          in: query
          required: false
          description: An optional boolean flag to include results of deleted members.
          schema:
            type: boolean
            default: false
          example: true
        - name: start
          in: query
          required: false
          description: Index of the first result to be returned.
          schema:
            type: string
            default: 0
          example: 0
        - name: limit
          in: query
          required: false
          description: Maximum number of results to be returned in one page.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
          example: 50
      responses:
        '200':
          description: Course item-specific grading information for given search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  elements:
                    type: array
                    items:
                      $ref: '#/components/schemas/CourseGradebookReport'
                  paging:
                    type: object
                    properties:
                      next:
                        type: integer
                        format: int32
                      total:
                        type: integer
                        format: int32
                  linked:
                    type: object
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_02_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
  /api/businesses.v1/{orgId}/programs/{programId}/memberships/{programId~externalId}:
    get:
      summary: Check whether user is in a program
      description: This checks whether a user is a member of a specified program. The external user id in the request will be set either via SSO, or added when inviting the user.
      operationId: getMembership
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: 4LVhtQQNEemZUwrw3z8SgA
        - in: path
          name: programId~externalId
          description: Composed identifier with program ID and external ID separated by tilde (~).
          required: true
          schema:
            type: string
          example: 4LVhtQQNEemZUwrw3z8SgA~johndoe-sample-domain-ID
      responses:
        "200":
          description: User is a member of the specified program
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMembershipResponse'
        "400":
          $ref: '#/components/responses/ERROR_400'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant_01:
                  $ref: '#/components/examples/404_NotFound_Variant_01_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_02_NO_PROGRAM_MEMBERSHIP'
    delete:
      summary: Delete membership from a program
      description: Delete a user from the program. The membership id here is the id returned by the API call to list of memberships. The learner will need to be reinvited to rejoin the program.
      operationId: deleteMembershipFromProgram
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: 4LVhtQQNEemZUwrw3z8SgA
        - in: path
          name: programId~externalId
          description: Composed identifier with program ID and external ID separated by tilde (~).
          required: true
          schema:
            type: string
          example: 4LVhtQQNEemZUwrw3z8SgA~johndoe-sample-domain-ID
        - in: query
          name: softDelete
          description: If set to true, allows the deleted member to rejoin the program without the need to be reinvited. Default is false.
          schema:
            type: boolean
            default: false
          required: false
          example: true
      responses:
        '204':
          description: If the delete is successful, the response should be a 204 code with no additional content.
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
  /api/businesses.v1/{orgId}/programs/{programId}/memberships:
    post:
      summary: Create a program membership for the user
      description: Creates a program membership for the user. Note that this will only work if the user already has a Coursera account.
      operationId: createProgramMembership
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: 4LVhtQQNEemZUwrw3z8SgA
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  description: The full name of the user
                  type: string
                  example: John Doe
                email:
                  description: The email address of the user
                  type: string
                  example: johndoe@domain.com
                externalId:
                  description: The unique external identifier for a user
                  type: string
                  example: johndoe-sample-domain-ID
                sendWelcomeEmail:
                  description: Flag for sending Coursera welcome email
                  type: boolean
                  example: false
        required: true
      responses:
        "201":
          description: User Program Membership Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMembershipResponse'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant_01:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_USER_EMAIL_NOT_VERIFIED'
                variant_02:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_PROGRAM_MEMBERSHIPS_INVALID_JSON'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
    get:
      summary: Get list of memberships in a program
      description: Returns a paginated list of accepted members in your program.
      operationId: getMembershipsInProgram
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: p5Zp4c0nEea0zwpn63qgwg
        - in: query
          name: start
          description: Index of the first result to be returned. Default is 0.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - in: query
          name: limit
          description: Maximum number of results to be returned. Default is 100.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
          example: 10
      responses:
        '200':
          description: Paginated list of accepted members in your program
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramMembershipsResponse'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
  /api/businesses.v1/{orgId}/programs/{programId}/invitations:
    post:
      summary: Invite a single user to a program
      description: This adds a user as an invitee to a program. The external user id in the request can be an LMS / App specific identifier that can be later used for downstream calls. You can also trigger the invitation email to be sent automatically by specifying true for sendEmail in the request.
      operationId: inviteUserToProgram
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: 4LVhtQQNEemZUwrw3z8SgA
        - in: query
          name: contractId
          description: Id of the specific contract to invite a learner to. Only needed if there are multiple contracts attached to the program.
          schema:
            type: string
          required: false
          example: kc1ttlEmEeqWIIhJzaiASQ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalId:
                  description: The unique external identifier for a user.
                  type: string
                  example: 413861904646
                fullName:
                  description: The full name of the user.
                  type: string
                  example: John Doe
                email:
                  description: The email address of the user.
                  type: string
                  example: jdoe@domain.com
                sendEmail:
                  description: Flag for triggering the invitation email.
                  type: boolean
                  example: false
        required: true
      responses:
        '201':
          description: User invited to a program
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitation'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant_01:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_PROGRAM_INVITEE_ERROR_EXISTING_INVITATION_FOR_EMAIL'
                variant_02:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_PROGRAM_INVITATIONS_INVALID_JSON'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
    get:
      summary: Get list of invitations in a program
      description: Returns a paginated list of pending invitations in your program.
      operationId: getInvitationsInProgram
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: p5Zp4c0nEea0zwpn63qgwg
        - in: query
          name: start
          description: Index of the first result to be returned. Default is 0.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          example: 0
        - in: query
          name: limit
          description: Maximum number of results to be returned. Default is 100.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
          example: 10
      responses:
        '200':
          description: Paginated list of pending invitations in a program
          content:
            application/json:
              schema:
                type: object
                properties:
                  elements:
                    type: array
                    items:
                      $ref: '#/components/schemas/PendingInvitation'
                  paging:
                    $ref: '#/components/schemas/Pagination'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
  /api/businesses.v1/{orgId}/programs/{programId}/invitations?action=multiCreate:
    post:
      summary: Invite multiple users to a program
      description: This adds multiple users as invitees to a program. The external user id in the request can be an LMS / App specific identifier that can be later used for downstream calls. You can also trigger the invitation email to be sent automatically by specifying true for sendEmail in the request.
      operationId: inviteMultipleUsersToProgram
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: 4LVhtQQNEemZUwrw3z8SgA
        - in: query
          name: contractId
          description: Id of the specific contract to invite a learner to. Only needed if there are multiple contracts attached to the program.
          schema:
            type: string
          required: false
          example: kc1ttlEmEeqWIIhJzaiASQ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invitees:
                  description: List of users to be invited. Can be a single user object or an array of user objects.
                  type: array
                  items:
                    $ref: '#/components/schemas/Invitee'
                sendEmail:
                  description: Flag for triggering the invitation email.
                  type: boolean
                  example: false
        required: true
      responses:
        '200':
          description: Multiple users invited to a program
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleUserInvitationResponse'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant_01:
                  $ref: '#/components/examples/400_BadRequest_Variant_03_PROGRAM_INVITATIONS_INVALID_JSON'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          $ref: '#/components/responses/ERROR_404'
  /api/businesses.v1/{orgId}/programs/{programId}/invitations/{programId~externalId}:
    delete:
      summary: Delete invitation from a program
      description: Delete a pending program invitation.
      operationId: deleteInvitationFromProgram
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: programId
          description: The ID of the program.
          required: true
          schema:
            type: string
          example: 4LVhtQsdfsdfrw3z8SgA
        - in: path
          name: programId~externalId
          description: Composed identifier with program ID and external ID separated by tilde (~).
          required: true
          schema:
            type: string
          example: 4LVhtQsdfsdfrw3z8SgA~johndoe-sample-domain-ID
      responses:
        '204':
          description: No content is returned with this response, only the status code 204.
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
  /api/businesses.v1/{orgId}/users/{externalId}:
    delete:
      summary: Delete a user from all programs
      description: Delete a user from all programs. This also revokes access to the corresponding courses/specializations in the programs.
      operationId: deleteUserFromAllPrograms
      security:
        - BearerToken: []
      parameters:
        - in: path
          name: orgId
          description: The ID of the organization.
          required: true
          schema:
            type: string
          example: DjYCkBQTQV69TtWA7RuNug
        - in: path
          name: externalId
          description: The external ID of the user to be deleted.
          required: true
          schema:
            type: string
          example: johndoe-sample-domain-ID
        - in: query
          name: softDelete
          description: If set to true, allows the deleted member to rejoin the program without the need to be reinvited. Default is false.
          schema:
            type: boolean
            default: false
          required: false
          example: true
      responses:
        '204':
          description: No content is returned with this response, only the status code 204.
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
  /api/rest/v1/enterprise/programs/{programId}/skillsets:
    get:
      summary: Get a list of Skillsets in an enterprise program.
      description: Returns a paginated list of all SkillSets in your enterprise program. Each entry in the list represents a single SkillSet.
      operationId: getProgramSkillsets
      security:
        - BearerToken: []
      parameters:
      - name: programId
        in: path
        required: true
        description: id of program
        schema:
          type: string
        example: 4LVhtQsdfsdfrw3z8SgA
      - name: offset
        in: query
        required: false
        description: Index of the first result to be returned. Default is 0.
        schema:
          type: integer
          format: int32
          default: 0
        example: 0
      - name: limit
        in: query
        required: false
        description: Maximum number of results to be returned. Default is 100.
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSkillsets'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_04_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant:
                  $ref: '#/components/examples/404_NotFound_Variant_03_DEFAULT'
  /api/rest/v1/enterprise/programs/{programId}/skillsets/{skillsetId}/skills/{skillId}/recommendations:
    get:
      summary: Get a list of all content recommendations for a skill within a SkillSet.
      description: Returns a paginated list of all content recommendations for a skill within a SkillSet.
      operationId: getSkillRecommendations
      security:
        - BearerToken: []
      parameters:
      - name: programId
        in: path
        required: true
        description: id of program
        schema:
          type: string
        example: 4LVhtQsdfsdfrw3z8SgA
      - name: skillsetId
        in: path
        required: true
        description: id of Skillset
        schema:
          type: string
        example: IZWq23fdgdfafKX12w
      - name: skillId
        in: path
        required: true
        description: id of skill
        schema:
          type: string
        example: data-analysis-software
      - name: externalUserId
        in: query
        required: false
        description: unique id of learner
        schema:
          type: string
        example: 63261a1fxxxxx818578fa
      - name: email
        in: query
        required: false
        description: email of learner
        schema:
          type: string
        example: example@coursera.org
      - name: offset
        in: query
        required: false
        description: Index of the first result to be returned. Default is 0.
        schema:
          type: integer
          format: int32
          default: 0
        example: 10
      - name: limit
        in: query
        required: false
        description: Maximum number of results to be returned. Default is 100.
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSkillRecommendation'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_04_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant_01:
                  $ref: '#/components/examples/404_NotFound_Variant_04_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_03_DEFAULT'
  /api/rest/v1/enterprise/programs/{programId}/skillsets/{skillsetId}/recommendations:
    get:
      summary: Get a list of all content recommendations for a SkillSet.
      description: Returns a paginated list of all content recommendations for a SkillSet.
      operationId: getSkillsetRecommendations
      security:
        - BearerToken: []
      parameters:
      - name: programId
        in: path
        required: true
        description: id of program
        schema:
          type: string
        example: 4LVhtQsdfsdfrw3z8SgA
      - name: skillsetId
        in: path
        required: true
        description: id of Skillset
        schema:
          type: string
        example: IZWq23fdgdfafKX12w
      - name: externalUserId
        in: query
        required: false
        description: unique id of learner
        schema:
          type: string
        example: 63261a1fxxxxx818578fa
      - name: email
        in: query
        required: false
        description: email of learner
        schema:
          type: string
        example: example@coursera.org
      - name: offset
        in: query
        required: false
        description: Index of the first result to be returned. Default is 0.
        schema:
          type: integer
          format: int32
          default: 0
        example: 10
      - name: limit
        in: query
        required: false
        description: Maximum number of results to be returned. Default is 100.
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSkillsetRecommendation'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant_01:
                  $ref: '#/components/examples/404_NotFound_Variant_04_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_03_DEFAULT'
  /api/rest/v1/enterprise/programs/{programId}/skillsets/learner-progress:
    get:
      summary: Get Skillsets progress for a learner.
      description: Returns the Skillset progress of a single learner in your learning program.
      operationId: getSkillsetProgress
      security:
        - BearerToken: []
      parameters:
      - name: programId
        in: path
        required: true
        description: id of program
        schema:
          type: string
        example: 4LVhtQsdfsdfrw3z8SgA
      - name: externalUserId
        in: query
        required: false
        description: unique id of learner
        schema:
          type: string
          default: ""
        example: 63261a1fxxxxx818578fa
      - name: email
        in: query
        required: false
        description: email of learner
        schema:
          type: string
          default: ""
        example: example@coursera.org
      - name: skillsetIds
        in: query
        required: true
        description: a list of Skillset ids
        schema:
          type: array
          items:
            type: string
        example:
          - IZWq23fdgdfafKX12w
            Ydo820fgadfUang78M
            Jonge358gieSpgn2sn
            pYngpsen628suGpenm
      - name: offset
        in: query
        required: false
        description: Index of the first result to be returned. Default is 0.
        schema:
          type: integer
          format: int32
          default: 0
        example: 10
      - name: limit
        in: query
        required: false
        description: Maximum number of results to be returned. Default is 100.
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSkillsetProgressByLearner'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_04_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant:
                  $ref: '#/components/examples/404_NotFound_Variant_04_DEFAULT'
  /api/rest/v1/enterprise/programs/{programId}/skills/{skillId}/scores:
    get:
      summary: Get Skill scores for a single skill.
      description: Returns the Skill scores of a single skill for up to 10 learners.
      operationId: getSkillScoreForLearners
      security:
        - BearerToken: []
      parameters:
      - name: programId
        in: path
        required: true
        description: id of program
        schema:
          type: string
        example: 4LVhtQsdfsdfrw3z8SgA
      - name: skillId
        in: path
        required: true
        description: id of skill
        schema:
          type: string
        example: data-analysis-software
      - name: emails
        in: query
        required: false
        description: list of learner emails
        schema:
          type: array
          items:
            type: string
          default: []
        example:
          - example@coursera.org
            example1@coursera.org
            example2@coursera.org
            example3@coursera.org
      - name: externalUserIds
        in: query
        required: false
        description: a list of learner externalIds
        schema:
          type: array
          items:
            type: string
          default: []
        example:
          - externalUserId1
            externalUserId2
            externalUserId3
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSkillScorePerLearner'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403_Forbidden'
              examples:
                variant_01:
                  $ref: '#/components/examples/403_Forbidden_Variant_01_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/403_Forbidden_Variant_02_DEFAULT'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant_01:
                  $ref: '#/components/examples/404_NotFound_Variant_04_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_03_DEFAULT'
  /api/rest/v1/enterprise/programs/{programId}/learner-skill-scores:
    get: 
      summary: Get the skills scores of a single learner in your learning program.
      description: Returns the skills scores of a single learner in your learning program. Max 10 skills.
      operationId: getLearnerSkillScores
      security:
        - BearerToken: []
      parameters:
      - name: programId
        in: path
        required: true
        description: id of program
        schema:
          type: string
        example: 4LVhtQsdfsdfrw3z8SgA
      - name: email
        in: query
        required: false
        description: email of learner
        schema:
          type: string
        example: example@coursera.org
      - name: externalUserId
        in: query
        required: false
        description: unique id of learner
        schema:
          type: string
        example: 63261a1fxxxxx818578fa
      - name: skillIds
        in: query
        required: true
        description: a list of skillIds
        schema:
          type: array
          items:
            type: string
        example:
          - computer-engineering
            accounting
            communication
            software-engineering
      - name: offset
        in: query
        required: false
        description: Index of the first result to be returned. Default is 0.
        schema:
          type: integer
          format: int32
          default: 0
        example: 10
      - name: limit
        in: query
        required: false
        description: Maximum number of results to be returned. Default is 100.
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLearnerWithSkillScores'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_04_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403_Forbidden'
              examples:
                variant_01:
                  $ref: '#/components/examples/403_Forbidden_Variant_01_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/403_Forbidden_Variant_02_DEFAULT'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant_01:
                  $ref: '#/components/examples/404_NotFound_Variant_04_DEFAULT'
                variant_02:
                  $ref: '#/components/examples/404_NotFound_Variant_03_DEFAULT'
  /api/rest/v1/enterprise/program/{programId}/skillsetReport:
    get:
      summary: Get all Skillsets reports of a program.
      description: Returns a paginated list of Skillsets reports of the given program.
      operationId: getSkillsetReportByProgram
      security:
        - BearerToken: []
      parameters:
      - name: programId
        in: path
        required: true
        description: id of program
        schema:
          type: string
        example: 4LVhtQsdfsdfrw3z8SgA
      - name: offset
        in: query
        required: false
        description: Index of the first result to be returned. Default is 0.
        schema:
          type: integer
          format: int32
          default: 0
        example: 10
      - name: limit
        in: query
        required: false
        description: Maximum number of results to be returned. Default is 100.
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalUserSkillsetReport'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant:
                  $ref: '#/components/examples/404_NotFound_Variant_03_DEFAULT'
  /api/rest/v1/enterprise/organizations/{orgId}/skillsets:
    get:
      summary: Get all Skillsets in an organization.
      description: Returns a paginated list of all SkillSets in an enterprise organization. Each entry in the list represents a single SkillSet.
      operationId: getOrganizationSkillsets
      security:
        - BearerToken: []
      parameters:
      - name: orgId
        in: path
        required: true
        description: id of organization
        schema:
          type: string
        example: your_org_id
      - name: offset
        in: query
        required: false
        description: value of nextToken returned by previous request
        schema:
          type: string
          default: ""
        example: 3adj45u
      - name: limit
        in: query
        required: false
        description: Maximum number of results to be returned. Default is 100.
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSkillsetsWithPrograms'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_04_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
  /api/rest/v1/enterprise/organizations/{orgId}/skillsetReport:
    get:
      summary: Get Skillsets reports of an organization.
      description: Returns a paginated list of Skillsets reports of the given organization.
      operationId: getSkillsetReportByOrg
      security:
        - BearerToken: []
      parameters:
      - name: orgId
        in: path
        required: true
        description: id of organization
        schema:
          type: string
        example: your_org_id
      - name: offset
        in: query
        required: false
        description: Index of the first result to be returned. Default is 0.
        schema:
          type: integer
          format: int32
          default: 0
        example: 10
      - name: limit
        in: query
        required: false
        description: Maximum number of results to be returned. Default is 100.
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalUserSkillsetReport'
        "400":
          description: Response returned when the request is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadRequest'
              examples:
                variant:
                  $ref: '#/components/examples/400_BadRequest_Variant_04_DEFAULT'
        "401":
          $ref: '#/components/responses/ERROR_401'
        "403":
          $ref: '#/components/responses/ERROR_403'
        "404":
          description: Response returned when the requested resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404_NotFound'
              examples:
                variant:
                  $ref: '#/components/examples/404_NotFound_Variant_03_DEFAULT'

  # =========== / Reusable Responses (end) ===========
