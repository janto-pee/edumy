// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO users (
        username,
        hashed_password,
        first_name,
        last_name,
        email,
        address,
        address2,
        city,
        country
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
    )
RETURNING username, hashed_password, first_name, last_name, email, address, address2, city, country, is_email_verified, password_changed_at, created_at, updated_at
`

type CreateAuthorParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	Email          string `json:"email"`
	Address        string `json:"address"`
	Address2       string `json:"address2"`
	City           string `json:"city"`
	Country        string `json:"country"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createAuthor,
		arg.Username,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Address,
		arg.Address2,
		arg.City,
		arg.Country,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Address,
		&i.Address2,
		&i.City,
		&i.Country,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
